/*
 * generated by Xtext 2.27.0.M2
 */
package gendev.bot.turtle.generator

import gendev.bot.turtle.turtleLang.Move
import gendev.bot.turtle.turtleLang.Program
import gendev.bot.turtle.turtleLang.Repeat
import gendev.bot.turtle.turtleLang.Turn
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TurtleLangGenerator extends AbstractGenerator {

  val String head = ""
  val String tail = ""

  override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
    val model = resource.contents.head as Program
    fsa.generateFile(resource.deriveArduinoFileNameFor, model.doGenerateArduinoCode)

  }

  def deriveArduinoFileNameFor(Resource resource) {
    resource.URI.lastSegment + "/" + resource.URI.appendFileExtension('ino').lastSegment
  }

  /**
   * generates code by pasting the fixed head and fixed tail of the program and 
   * then generating code for each statement
   * 
   */
  def String doGenerateArduinoCode(Program program) {
    head + '''
      «FOR stm : program.statement»
        «generateStatement(stm)»
      «ENDFOR»
    ''' + tail
  }

  dispatch def String generateStatement(Turn turn) '''
    «IF turn.dir=="left"»
      backA();
      forwardB();
    «ELSE»
      forwardA();
      backB();
    «ENDIF»
    delay(«5 * turn.degree»);
  '''

  dispatch def String generateStatement(Move move) '''
    «IF move.dir == "forward"»
      forwardA();
      forwardB();
    «ELSE»
      backA();
      backB();
    «ENDIF»
    delay(«500 * move.steps»);
  '''

  dispatch def String generateStatement(Repeat rep) '''
    for (int i = 0; i < «rep.times»; i++) {
      «FOR stm : rep.statements»
        «generateStatement(stm)»
      «ENDFOR»
    }
  '''
}
